# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD 


# Event Trigger
# master branch에 push
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
on:
  push:
    branches: [ BE/feat/github-action-CI ]
#   pull_request:
#     branches: [ main ]

jobs:
  build:
    #실행 환경 지정
    runs-on: ubuntu-latest
    env:
      working-directory: ./BE
    
    # Task의 sequence를 명시한다.
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
                  
    - name: Grant execute permission for gradlew
      working-directory: ${{env.working-directory}}
      run:  |
        pwd
        chmod +x gradlew
      
    - name: BootJar with Gradle
      working-directory: ${{env.working-directory}}
      run: ./gradlew clean bootjar
      #run: ./gradlew clean build

    # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: |
        if [ ! -d "deploy"]; then
            mkdir deploy
        fi       

    # Jar 파일 Copy   
    - name: Copy Jar
      run: cp ./BE/build/libs/*.jar ./deploy/
      
    # 압축파일 형태로 전달
    - name: Make zip file
      run: |
        if [ -f "springboot-intro-build.zip"]; then
          rm -rf ./springboot-intro-build.zip
        fi
        zip -r -qq -j ./springboot-intro-build.zip ./deploy

          
    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{'{{' }} secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{'{{' }} secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws s3 cp |
        --region ap-northeast-2 \
        --acl private \
        ./springboot-intro-build.zip s3://cooper-issuetracker-build-bucket/
